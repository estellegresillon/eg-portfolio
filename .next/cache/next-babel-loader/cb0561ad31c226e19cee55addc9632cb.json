{"ast":null,"code":"import { useState, useEffect } from 'react';\nexport var useWindowSize = function useWindowSize() {\n  var isClient = true;\n\n  var getSize = function getSize() {\n    return {\n      width: isClient ? window.innerWidth : undefined,\n      height: isClient ? window.innerHeight : undefined\n    };\n  };\n\n  var _useState = useState(getSize),\n      windowSize = _useState[0],\n      setWindowSize = _useState[1];\n\n  useEffect(function () {\n    if (!isClient) {\n      return false;\n    }\n\n    var handleResize = function handleResize() {\n      setWindowSize(getSize());\n    };\n\n    window.addEventListener('resize', handleResize);\n    return function () {\n      return window.removeEventListener('resize', handleResize);\n    }; // eslint-disable-next-line\n  }, []); // Empty array ensures that effect is only run on mount and unmount\n\n  return windowSize;\n};","map":{"version":3,"sources":["/Users/estellegresillon/Code/eg-portfolio/src/hooks/useWindowSize.js"],"names":["useState","useEffect","useWindowSize","isClient","getSize","width","window","innerWidth","undefined","height","innerHeight","windowSize","setWindowSize","handleResize","addEventListener","removeEventListener"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AAEA,OAAO,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,GAAM;AACjC,MAAMC,QAAQ,OAAd;;AAEA,MAAMC,OAAO,GAAG,SAAVA,OAAU,GAAM;AACpB,WAAO;AACLC,MAAAA,KAAK,EAAEF,QAAQ,GAAGG,MAAM,CAACC,UAAV,GAAuBC,SADjC;AAELC,MAAAA,MAAM,EAAEN,QAAQ,GAAGG,MAAM,CAACI,WAAV,GAAwBF;AAFnC,KAAP;AAID,GALD;;AAHiC,kBAUGR,QAAQ,CAACI,OAAD,CAVX;AAAA,MAU1BO,UAV0B;AAAA,MAUdC,aAVc;;AAYjCX,EAAAA,SAAS,CAAC,YAAM;AACd,QAAI,CAACE,QAAL,EAAe;AACb,aAAO,KAAP;AACD;;AAED,QAAMU,YAAY,GAAG,SAAfA,YAAe,GAAM;AACzBD,MAAAA,aAAa,CAACR,OAAO,EAAR,CAAb;AACD,KAFD;;AAIAE,IAAAA,MAAM,CAACQ,gBAAP,CAAwB,QAAxB,EAAkCD,YAAlC;AACA,WAAO;AAAA,aAAMP,MAAM,CAACS,mBAAP,CAA2B,QAA3B,EAAqCF,YAArC,CAAN;AAAA,KAAP,CAVc,CAWhB;AACC,GAZQ,EAYN,EAZM,CAAT,CAZiC,CAwBzB;;AAER,SAAOF,UAAP;AACD,CA3BM","sourcesContent":["import { useState, useEffect } from 'react';\n\nexport const useWindowSize = () => {\n  const isClient = typeof window === 'object';\n\n  const getSize = () => {\n    return {\n      width: isClient ? window.innerWidth : undefined,\n      height: isClient ? window.innerHeight : undefined\n    };\n  }\n\n  const [windowSize, setWindowSize] = useState(getSize);\n\n  useEffect(() => {\n    if (!isClient) {\n      return false;\n    }\n    \n    const handleResize = () => {\n      setWindowSize(getSize());\n    }\n\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  // eslint-disable-next-line\n  }, []); // Empty array ensures that effect is only run on mount and unmount\n\n  return windowSize;\n};\n"]},"metadata":{},"sourceType":"module"}