{"ast":null,"code":"import { useState, useEffect } from 'react';\nexport const useWindowSize = () => {\n  const isClient = false;\n\n  const getSize = () => {\n    return {\n      width: isClient ? window.innerWidth : undefined,\n      height: isClient ? window.innerHeight : undefined\n    };\n  };\n\n  const {\n    0: windowSize,\n    1: setWindowSize\n  } = useState(getSize);\n  useEffect(() => {\n    if (!isClient) {\n      return false;\n    }\n\n    const handleResize = () => {\n      setWindowSize(getSize());\n    };\n\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize); // eslint-disable-next-line\n  }, []); // Empty array ensures that effect is only run on mount and unmount\n\n  return windowSize;\n};","map":{"version":3,"sources":["/Users/estellegresillon/Code/eg-portfolio/src/hooks/useWindowSize.js"],"names":["useState","useEffect","useWindowSize","isClient","getSize","width","window","innerWidth","undefined","height","innerHeight","windowSize","setWindowSize","handleResize","addEventListener","removeEventListener"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AAEA,OAAO,MAAMC,aAAa,GAAG,MAAM;AACjC,QAAMC,QAAQ,QAAd;;AAEA,QAAMC,OAAO,GAAG,MAAM;AACpB,WAAO;AACLC,MAAAA,KAAK,EAAEF,QAAQ,GAAGG,MAAM,CAACC,UAAV,GAAuBC,SADjC;AAELC,MAAAA,MAAM,EAAEN,QAAQ,GAAGG,MAAM,CAACI,WAAV,GAAwBF;AAFnC,KAAP;AAID,GALD;;AAOA,QAAM;AAAA,OAACG,UAAD;AAAA,OAAaC;AAAb,MAA8BZ,QAAQ,CAACI,OAAD,CAA5C;AAEAH,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACE,QAAL,EAAe;AACb,aAAO,KAAP;AACD;;AAED,UAAMU,YAAY,GAAG,MAAM;AACzBD,MAAAA,aAAa,CAACR,OAAO,EAAR,CAAb;AACD,KAFD;;AAIAE,IAAAA,MAAM,CAACQ,gBAAP,CAAwB,QAAxB,EAAkCD,YAAlC;AACA,WAAO,MAAMP,MAAM,CAACS,mBAAP,CAA2B,QAA3B,EAAqCF,YAArC,CAAb,CAVc,CAWhB;AACC,GAZQ,EAYN,EAZM,CAAT,CAZiC,CAwBzB;;AAER,SAAOF,UAAP;AACD,CA3BM","sourcesContent":["import { useState, useEffect } from 'react';\n\nexport const useWindowSize = () => {\n  const isClient = typeof window === 'object';\n\n  const getSize = () => {\n    return {\n      width: isClient ? window.innerWidth : undefined,\n      height: isClient ? window.innerHeight : undefined\n    };\n  }\n\n  const [windowSize, setWindowSize] = useState(getSize);\n\n  useEffect(() => {\n    if (!isClient) {\n      return false;\n    }\n    \n    const handleResize = () => {\n      setWindowSize(getSize());\n    }\n\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  // eslint-disable-next-line\n  }, []); // Empty array ensures that effect is only run on mount and unmount\n\n  return windowSize;\n};\n"]},"metadata":{},"sourceType":"module"}